<?php
namespace app\admin\controller;



use app\common\logic\CategoryLogic;
use app\common\logic\GoodsLogic;
use app\common\logic\My_Logic;
use app\common\logic\SpecLogic;
use think\Config;
use think\Cookie;
use think\Db;
use think\Loader;
use think\File;
use think\Session;
use think\Validate;
//use app\admin\validate\Goods;

class Goods extends Base
{
    public $path = '/public/uploads/';//文件保存路劲开头

    public function _initialize()
    {
        return parent::_initialize(); // TODO: Change the autogenerated stub
    }

    public function test()
    {
    $this->assign('role',1);
        return $this->fetch();


    }


    public function index(){
        $cateid=input('cateid');
        $isonsale=input('isonsale');
        $type=input('type');
        $search=input('search');

        $goodslogic = new GoodsLogic();
        $goodslist = $goodslogic->goodsAlllist($cateid,$isonsale,$type,$search);
        $page = $goodslist->render();//分页页码

        //获取所有分类
        $catelist = $goodslogic->getcatelist();
        $this->assign('goodslist',$goodslist);
        $this->assign('page',$page);
        $this->assign('catelist',$catelist);
        return $this->fetch();
    }

    //添加商品页面
    public function add()
    {
        $goodsid=0;
        $catetree = Db::name('goods_category')->where("pid = 0")->select();
        $goodsmodel = Db::name('goods_type')->order('tid')->select();
        $this->assign('cate1',$catetree);
        $this->assign('goodsmodel',$goodsmodel);
        $this->assign('goods',$goodsid);
        return $this->fetch();


    }

    //获取修改商品页面
    public function goodsinfo(){
        $id = input('id');
        $get = new GoodsLogic();
        $goodsinfo = $get->getgoodsinfo($id);
        //根据pid_info获取分类的所有父类pid
        foreach ($goodsinfo as $key=>$value){
            $path = explode('_',$value['category']['pid_path']);
            $goodsinfo[$key]['cate1']=$path[1]?$get->getCateByid($path[1]):'';
            $goodsinfo[$key]['cate2']=$path[2]?$get->getCateByid($path[2]):'';
//            $goodsinfo[$key]['cate3']=$path[3]?$get->getCateByid($path[3]):'';
        }


        //获取商品相册
        $where=['goods_id'=>$id];
        $img = $get->get_all($where,'*','GoodsPicture');
        if ($goodsinfo[0]['cate1']&&$goodsinfo[0]['cate2']){
            $cate2 = $get->getCateBypid($goodsinfo[0]['cate1']['id']);
            $this->assign('cate2',$cate2);
        }
        //获取该商品的模型
        $logic=new GoodsLogic();
        $goodstypeid = $logic->getgoodstype($id);
        $catetree = Db::name('goods_category')->where("pid = 0")->select();
        //获取所有模型
        $goodsmodel = Db::name('goods_type')->order('tid')->select();
        $this->assign('cate1',$catetree);
        $this->assign('goodsinfo',$goodsinfo);
        $this->assign('goodsmodel',$goodsmodel);
        $this->assign('goodstypeid',$goodstypeid);
        $this->assign('goods',$id);
        $this->assign('img',$img);
        return $this->fetch();
    }

//获得2 3级分类
    public function changelevelcate(){
        $cateid = input('cate');
        $catetree = Db::name('goods_category')->where(['pid'=>$cateid,'is_show'=>1])->order('id desc')->select();
        if($catetree){
            return json(['status'=>1,'msg' => '获取成功！','result'=>$catetree]);
        }else{
//            dump($cateid);
            return json(['status' => -1, 'msg' => '获取失败！', 'result' =>[]]);
        }
//        dump($cateid);



    }

    //根据模型id获取商品规格
    public function getspecitem(){
        $goods_id = input('goods_id/d') ? input('goods_id/d') : 0;
        $typeid = input('id');
        $logic = new SpecLogic();
        $spec= $logic->getgoodsaddoneSpeclist($typeid);
        foreach($spec as $k => $v){
            $spec[$k]['spec_item'] = Db::name('spec_item')->where("spec_id",$v['id'])->order('id')->column('id,item'); // 获取规格项
        }

        if ($goods_id){
            $items_id = Db::name('spec_goods_price')->where("goods_id", $goods_id)->column("GROUP_CONCAT(`key` SEPARATOR '_') AS items_id");
//            dump($items_id);
            $items_ids = explode('_', $items_id[0]);
            $this->assign('items_ids',$items_ids);
        }
//        dump($spec);
        $this->assign('specList',$spec);
        return $this->fetch('spec_select');
    }

    //根据模型id获取商品属性
    public function getattr(){
        $GoodsLogic = new GoodsLogic();
        $str = $GoodsLogic->getAttrInput($_REQUEST['goods_id'],$_REQUEST['id']);
        exit($str);
    }

    //动态获取商品规格输入框 根据不同的数据返回不同的输入框
    public function ajaxGetSpecInput(){
        $spec_arr = input('spec_arr/a',[[]]);
//        dump($spec_arr);
        $GoodsLogic = new GoodsLogic();
        $goods_id = input('goods_id/d') ? input('goods_id/d') : 0;
        $str = $GoodsLogic->getSpecInput($goods_id ,$spec_arr);
        exit($str);
    }

    //处理图片返回路径
    public function img(){
        $file =request()->file('file');
//        dump($file);
//        die;
        if($file){
            $info = $file->move(ROOT_PATH . 'public' . DS . 'uploads');
            if($info){
                // 成功上传后 获取上传信息
                $filePathname = $info->getSaveName();
                $path = $this->path.str_replace('\\', '/', $filePathname);
                return json(['status'=>1,'path'=>$path]);
            }else{
                // 上传失败获取错误信息
                echo $file->getError();
            }
        }
        return json(['status'=>0]);
    }
    //添加修改商品
    public function addEditgoods(){
        $data = input('get.');
       //获取商品属性值

        $imgdata='';
        if ($data['imagelist']){
            $imgdata=explode('&',$data['imagelist']);
        }

        //判断商品详情是否有值
        if (!isset($data['goods_desc'])){
            $data['goods_desc']='';
        }
        $goodsid=input('goods_id/d');
        foreach($data as $key=>$val ){
            if(preg_match('/^attr.*/',$key)) {
               $attr[ltrim($key,"attr_")]=$val;//添加到attribute表的数据
            }
        }

        if (!$data['original_img']){
            $this->error('商品图片不能为空',url('Admin/goods/add'));
        }

        $goodslogic = new GoodsLogic();
        //判断商品是否重复添加
        $res = $goodslogic->checkaddgoods($data,$goodsid);
        if ($res){
            if ($res['status']==0){
                $this->error($res['msg'],url('Admin/goods/index'));
            }

        }
        //获取1级商品分类名称
        $catename1 = mb_substr($goodslogic->getcatenamebyId($data['cate1'])['name'],0,2);
        $num = get_letter($catename1);

        $validate = Loader::validate('Goods');
        if(!$validate->check($data)){
            return json(['status'=>0,'msg'=>$validate->getError()]);
        }else{
            $args1 = $goodslogic->setarg1($data);
            if ($goodsid==0){
                $args1['goods_time']=time();
            }

            Db::startTrans();
                try{
                    //如果有商品id则执行更新操作
                    if ($goodsid>0){
                        //执行修改操作
                        $update = Db::name('goods')->where('id',$goodsid)->update($args1);
//                        //更新相册
                        if ($imgdata){
                            foreach ($imgdata as $k=>$v) {
                                $imglist[$k]['img_url']=$v;
                                $imglist[$k]['goods_id']=$data['goods_id'];
                            }

                            $updateimgagelist=$goodslogic->addimagelist($goodsid,$imglist);
//                            dump($updateimgagelist);
//                            die;
//
                        }else{
                            $goodslogic->del(['goods_id'=>intval($goodsid)],'GoodsPicture');
                            $updateimgagelist=true;
                        }
                            $res1=$res2=false;
                            //添加商品规格操作
                            if (isset($data['item'])){
                                    $res1=$goodslogic->addEditspecitem($goodsid,$data['item']);
//                                    if (!$res1){
//                                        $this->error('写入商品规格失败',url('Admin/goods/goodsinfo',array('id'=>$goodsid)),1);
//                                    }
                            }
                            //添加商品属性操作
                            if (isset($attr)) {
                                    $res2 = $goodslogic->addEditattr($goodsid, $attr);
//                                    if (!$res2) {
//                                        $this->error('写入商品属性失败', url('Admin/goods/goodsinfo',array('id'=>$goodsid)), 1);
//                                    }
                            }

                        if ($update||$updateimgagelist||$res1||$res2){
                            Db::commit();
                            $this->success('商品修改成功',url('Admin/goods/index'),1);
                        }else{
//                                dump($res2);
                            return  "<script>alert('修改商品失败');window.location.href='/Admin/Goods/goodsinfo/id/$goodsid.html';</script>";
//                            $this->error('修改商品失败',url('Admin/goods/goodsinfo',array('id'=>$goodsid)));
                        }
                    }
                    $id = Db::name('goods')->insertGetId($args1);
                    if ($id){
                        //如果没有填写goods_sn
                        if (empty($data['goods_sn'])){
                            $sn1= $num.$id;
                            $sn2='';
                            $length = strlen($sn1);
                                for ($i=$length;$i<9;$i++){
                                    $sn2.='0';
                                }
                            $sn = $num.$sn2.$id;
                            $args = ['goods_sn'=>$sn];
                            $res = Db::name('goods')->where('id',$id)->update($args);
                            if ($res){
                                //添加相册
                                if ($imgdata){
                                    foreach ($imgdata as $k=>$v) {
                                        $imglist[$k]['img_url']=$v;
                                        $imglist[$k]['goods_id']=$id;
                                    }

                                    $addimgagelist=$goodslogic->addall($imglist,'GoodsPicture');
                                    if (!$addimgagelist){
                                        $this->error('写入商品规格失败',url('Admin/goods/index'),1);
                                    }
                                }
                                //添加商品规格操作
                                if (isset($data['item'])){
                                    $res1=$goodslogic->addEditspecitem($id,$data['item']);
                                    if (!$res1){
                                        $this->error('写入商品规格失败',url('Admin/goods/index'),1);
                                    }
                                }
                                //添加商品属性操作
                                if (isset($attr)){
                                    $res2=$goodslogic->addEditattr($id,$attr);
                                    if (!$res2){
                                        $this->error('写入商品属性失败',url('Admin/goods/index'),1);
                                    }
                                }
                                Db::commit();
                                $this->success('商品添加成功',url('Admin/goods/index'),1);
                            }else{
//                            return json(['status'=>0,'msg'=>'自动写入商品编号失败']);
                                $this->error('自动写入商品编号失败',url('Admin/goods/add'),1);
                            }
                        }
                    }else{
                        $this->error('添加商品失败');
                    }
                }catch (\PDOException $e){
                    Db::rollback(); //回滚事务
                }

        }


    }

    //删除商品
    public function deletegoods(){
        $goodsid = input('goodsid');
        $logic = new GoodsLogic();
        Db::startTrans();
        try{
            $res = Db::name('goods')->where('id',$goodsid)->delete();
            $where = ['goods_id'=>$goodsid];
            $filed = '*';
            $checkspec = $logic->get_one($where,$filed,'SpecGoodsPrice');//查询是否有属性
            $checkattr = $logic->get_one($where,$filed,'GoodsAttr');//查询是否有属性
            if ($checkspec){
                $res1= $logic->delspec($where);
                if ($res1){
                    return json(['status'=>0,'msg'=>'商品删除失败']);
                }
            }
            if ($checkattr){
                $res2= $logic->delattr($where);
                if ($res2){
                    return json(['status'=>0,'msg'=>'商品删除失败']);
                }
            }

            if ($res){
                Db::commit();
                return json(['status'=>1,'msg'=>'商品删除成功']);
            }else{
                return json(['status'=>0,'msg'=>'商品删除失败']);
            }
        }catch (\PDOException $e){
            Db::rollback();
        }


//




    }



    //ajax改变商品的状态
    public function ajaxChangetype(){
        $type = input('type');
        $id = input('id/d');
//        dump($type);
//        dump($id);
        if (!$type||!$id){
            return json(['status'=>-100,'msg'=>'参数错误']);
        }
        $logic = new GoodsLogic();
        $res = $logic->ajaxSetGoodsType($type,$id);
        if ($res){
            return json(['status'=>200,'msg'=>"操作成功!"]);
        }else{
            return json(['status'=>-100,'msg'=>"操作失败!"]);
        }
    }



}
